# Highly divisible triangular number
# Problem 12
#
# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
# ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#    #1: 1
#    #3: 1,3
#    #6: 1,2,3,6
#   #10: 1,2,5,10
#   #15: 1,3,5,15
#   #21: 1,3,7,21
#   #28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred
# divisors?


# ============================  Support Functions =============================
def triangle_number_of(number)
  # de-optimization point
  number * (number + 1) / 2
end

# implement 2 more methods
# - divisors of--generated with prime divisors

# memoized_divisors_of--(can be combined with prime factorization)

# Find divisors by manually checking all values less than number up to num/2,
# then manually add number to results array and return divisors as an array
def divisors_of(number)
  divisors = []

  # Optimization point
  (1..number/2).each do |counter|
    divisors.push counter if number % counter == 0
  end

  divisors.push number

  return divisors
end

def divisor_count_of(number)
  divisors = divisors_of(number)

  return divisors.length
end

# ================================= Solution ==================================

puts "divisors of 5: #{divisors_of(5)}"

puts "divisors of 20: #{divisors_of(20)}"

counter = 1
incomplete = true
current_triangle_number = triangle_number_of(counter)

until divisor_count_of(current_triangle_number) > 500
  counter += 1
  current_triangle_number = triangle_number_of(counter)

  puts "counter: #{counter}" if counter % 50 == 0
end

puts "The first triangle number with over 500 divisors is: #{current_triangle_number}"

